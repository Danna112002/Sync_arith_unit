
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36 (git sha1 8f07a0d8404, clang 14.0.0-1ubuntu1.1 -fPIC -Os)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ustawienie.sv
Parsing SystemVerilog input from `ustawienie.sv' to AST representation.
Generating RTLIL representation for module `\ustawienie'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \ustawienie_rtl

2.2. Analyzing design hierarchy..
Top module:  \ustawienie_rtl
Removing unused module `\ustawienie'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ustawienie_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \ustawienie_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$ustawienie.sv:0$10 in module ustawienie_rtl.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 12 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~5 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
     1/48: $5\o_result[31:0]
     2/48: $5\tymczasowy_rejestr[31:0]
     3/48: $5$bitselwrite$data$ustawienie.sv:50$8[31:0]$85
     4/48: $5$bitselwrite$mask$ustawienie.sv:50$7[31:0]$84
     5/48: $5$bitselwrite$sel$ustawienie.sv:50$9[31:0]$86
     6/48: $4\o_result[31:0]
     7/48: $4\tymczasowy_rejestr[31:0]
     8/48: $4$bitselwrite$data$ustawienie.sv:44$5[31:0]$65
     9/48: $4$bitselwrite$mask$ustawienie.sv:44$4[31:0]$64
    10/48: $4$bitselwrite$sel$ustawienie.sv:44$6[31:0]$66
    11/48: $4$bitselwrite$sel$ustawienie.sv:50$9[31:0]$69
    12/48: $4$bitselwrite$data$ustawienie.sv:50$8[31:0]$68
    13/48: $4$bitselwrite$mask$ustawienie.sv:50$7[31:0]$67
    14/48: $3\o_result[31:0]
    15/48: $3\tymczasowy_rejestr[31:0]
    16/48: $3$bitselwrite$data$ustawienie.sv:38$2[31:0]$44
    17/48: $3$bitselwrite$mask$ustawienie.sv:38$1[31:0]$43
    18/48: $3$bitselwrite$sel$ustawienie.sv:38$3[31:0]$45
    19/48: $3$bitselwrite$sel$ustawienie.sv:50$9[31:0]$51
    20/48: $3$bitselwrite$data$ustawienie.sv:50$8[31:0]$50
    21/48: $3$bitselwrite$mask$ustawienie.sv:50$7[31:0]$49
    22/48: $3$bitselwrite$sel$ustawienie.sv:44$6[31:0]$48
    23/48: $3$bitselwrite$data$ustawienie.sv:44$5[31:0]$47
    24/48: $3$bitselwrite$mask$ustawienie.sv:44$4[31:0]$46
    25/48: $2\o_error[0:0]
    26/48: $2$bitselwrite$sel$ustawienie.sv:50$9[31:0]$41
    27/48: $2$bitselwrite$data$ustawienie.sv:50$8[31:0]$40
    28/48: $2$bitselwrite$mask$ustawienie.sv:50$7[31:0]$39
    29/48: $2$bitselwrite$sel$ustawienie.sv:44$6[31:0]$38
    30/48: $2$bitselwrite$data$ustawienie.sv:44$5[31:0]$37
    31/48: $2$bitselwrite$mask$ustawienie.sv:44$4[31:0]$36
    32/48: $2$bitselwrite$sel$ustawienie.sv:38$3[31:0]$35
    33/48: $2$bitselwrite$data$ustawienie.sv:38$2[31:0]$34
    34/48: $2$bitselwrite$mask$ustawienie.sv:38$1[31:0]$33
    35/48: $2\tymczasowy_rejestr[31:0]
    36/48: $2\o_result[31:0]
    37/48: $1\o_error[0:0]
    38/48: $1$bitselwrite$sel$ustawienie.sv:50$9[31:0]$31
    39/48: $1$bitselwrite$data$ustawienie.sv:50$8[31:0]$30
    40/48: $1$bitselwrite$mask$ustawienie.sv:50$7[31:0]$29
    41/48: $1$bitselwrite$sel$ustawienie.sv:44$6[31:0]$28
    42/48: $1$bitselwrite$data$ustawienie.sv:44$5[31:0]$27
    43/48: $1$bitselwrite$mask$ustawienie.sv:44$4[31:0]$26
    44/48: $1$bitselwrite$sel$ustawienie.sv:38$3[31:0]$25
    45/48: $1$bitselwrite$data$ustawienie.sv:38$2[31:0]$24
    46/48: $1$bitselwrite$mask$ustawienie.sv:38$1[31:0]$23
    47/48: $1\tymczasowy_rejestr[31:0]
    48/48: $1\o_result[31:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ustawienie_rtl.\o_result' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.\o_error' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.\tymczasowy_rejestr' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$mask$ustawienie.sv:38$1' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$data$ustawienie.sv:38$2' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$sel$ustawienie.sv:38$3' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$mask$ustawienie.sv:44$4' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$data$ustawienie.sv:44$5' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$sel$ustawienie.sv:44$6' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$mask$ustawienie.sv:50$7' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$data$ustawienie.sv:50$8' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
No latch inferred for signal `\ustawienie_rtl.$bitselwrite$sel$ustawienie.sv:50$9' from process `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\ustawienie_rtl.$proc$ustawienie.sv:0$10'.
Removing empty process `ustawienie_rtl.$proc$ustawienie.sv:0$10'.
Cleaned up 5 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.
<suppressed ~8 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.
<suppressed ~6 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 117 unused cells and 328 unused wires.
<suppressed ~125 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module ustawienie_rtl...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$102.
    dead port 1/2 on $mux $procmux$105.
    dead port 1/2 on $mux $procmux$108.
    dead port 1/2 on $mux $procmux$111.
    dead port 1/2 on $mux $procmux$177.
    dead port 1/2 on $mux $procmux$180.
    dead port 1/2 on $mux $procmux$183.
    dead port 1/2 on $mux $procmux$273.
    dead port 1/2 on $mux $procmux$276.
    dead port 1/2 on $mux $procmux$372.
    dead port 1/2 on $mux $procmux$438.
Removed 11 multiplexer ports.
<suppressed ~2 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 26 bits (of 32) from port B of cell ustawienie_rtl.$gt$ustawienie.sv:32$32 ($gt).
Removed top 1 bits (of 33) from port A of cell ustawienie_rtl.$neg$ustawienie.sv:0$56 ($neg).
Removed top 31 bits (of 32) from port B of cell ustawienie_rtl.$gt$ustawienie.sv:49$81 ($gt).
Removed top 25 bits (of 32) from port B of cell ustawienie_rtl.$lt$ustawienie.sv:49$82 ($lt).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ustawienie_rtl:
  creating $macc model for $neg$ustawienie.sv:0$56 ($neg).
  creating $macc cell for $neg$ustawienie.sv:0$56: $auto$alumacc.cc:365:replace_macc$476
  creating $alu model for $gt$ustawienie.sv:32$32 ($gt): new $alu
  creating $alu model for $gt$ustawienie.sv:49$81 ($gt): new $alu
  creating $alu model for $lt$ustawienie.sv:49$82 ($lt): new $alu
  creating $alu cell for $lt$ustawienie.sv:49$82: $auto$alumacc.cc:485:replace_alu$480
  creating $alu cell for $gt$ustawienie.sv:49$81: $auto$alumacc.cc:485:replace_alu$493
  creating $alu cell for $gt$ustawienie.sv:32$32: $auto$alumacc.cc:485:replace_alu$500
  created 3 $alu and 1 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.
<suppressed ~6 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 15 unused cells and 23 unused wires.
<suppressed ~16 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$constmap:5aa0ddb17ee71ceaef049a2b0a6dc25a7ff63a5d$paramod$edbf276777548c048bd39d4ba174f1a94fb7b993\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper maccmap for cells of type $macc.
  sub \i_arg_B (32 bits, signed)
Using template $paramod$42716ac05bbdeebe0400af26a1bdce4a3275bbe4\_90_alu for cells of type $alu.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'1
Creating constmapped module `$paramod$constmap:242b627afe103543f7f0c11316d507e5915e0dfb$paramod$edbf276777548c048bd39d4ba174f1a94fb7b993\_90_shift_shiftx'.

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:242b627afe103543f7f0c11316d507e5915e0dfb$paramod$edbf276777548c048bd39d4ba174f1a94fb7b993\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$762.
    dead port 2/2 on $mux $procmux$756.
    dead port 2/2 on $mux $procmux$750.
    dead port 2/2 on $mux $procmux$744.
    dead port 2/2 on $mux $procmux$738.
    dead port 2/2 on $mux $procmux$732.
Removed 6 multiplexer ports.
<suppressed ~356 debug messages>

3.20.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:242b627afe103543f7f0c11316d507e5915e0dfb$paramod$edbf276777548c048bd39d4ba174f1a94fb7b993\_90_shift_shiftx.
<suppressed ~28 debug messages>
Removed 0 unused cells and 11 unused wires.
Using template $paramod$constmap:242b627afe103543f7f0c11316d507e5915e0dfb$paramod$edbf276777548c048bd39d4ba174f1a94fb7b993\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$cc6a978c1b57cdb49efcec348c88d8e28bf1a01f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
No more expansions possible.
<suppressed ~628 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.
<suppressed ~1164 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
<suppressed ~261 debug messages>
Removed a total of 87 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 81 unused cells and 255 unused wires.
<suppressed ~82 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\ustawienie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 468 gates and 533 wires to a netlist network with 64 inputs and 33 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:               XOR cells:       56
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:            ANDNOT cells:       61
ABC RESULTS:               NOT cells:       43
ABC RESULTS:                OR cells:      166
ABC RESULTS:               MUX cells:       65
ABC RESULTS:        internal signals:      436
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 225 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \ustawienie_rtl

3.24.2. Analyzing design hierarchy..
Top module:  \ustawienie_rtl
Removed 0 unused modules.

3.25. Printing statistics.

=== ustawienie_rtl ===

   Number of wires:                382
   Number of wire bits:            475
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                410
     $_ANDNOT_                      61
     $_AND_                          1
     $_MUX_                         65
     $_NAND_                         3
     $_NOR_                          8
     $_NOT_                         43
     $_ORNOT_                        5
     $_OR_                         166
     $_XNOR_                         2
     $_XOR_                         56

3.26. Executing CHECK pass (checking for obvious problems).
Checking module ustawienie_rtl...
Found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\ustawienie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 410 gates and 474 wires to a netlist network with 64 inputs and 33 outputs.

4.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        3
ABC RESULTS:               NOT cells:       48
ABC RESULTS:               AND cells:       89
ABC RESULTS:                OR cells:       88
ABC RESULTS:        internal signals:      377
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 474 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.

6.1. Executing BMUXMAP pass.

6.2. Executing DEMUXMAP pass.
Dumping module `\ustawienie_rtl'.

7. Printing statistics.

=== ustawienie_rtl ===

   Number of wires:                200
   Number of wire bits:            293
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                228
     $_AND_                         89
     $_NOT_                         48
     $_OR_                          88
     $_XOR_                          3

   Estimated number of transistors:       1194

End of script. Logfile hash: bf0bc20a37, CPU: user 0.31s system 0.01s, MEM: 22.12 MB peak
Yosys 0.36 (git sha1 8f07a0d8404, clang 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 40% 2x abc (0 sec), 16% 22x opt_expr (0 sec), ...
