$date
	Thu Dec 14 02:26:31 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module sync_arith_unit_12_tb $end
$scope module sync_arith_unit_12 $end
$var wire 32 ! i_arg_A [31:0] $end
$var wire 32 " i_arg_B [31:0] $end
$var wire 1 # i_clk $end
$var wire 2 $ i_op [1:0] $end
$var wire 1 % i_reset $end
$var wire 32 & ustaw_wynik [31:0] $end
$var wire 32 ' przesu_wynik [31:0] $end
$var wire 32 ( poro_wynik [31:0] $end
$var wire 1 ) o_error_ust $end
$var wire 1 * o_error_przes $end
$var wire 1 + o_error_konw $end
$var wire 32 , konw_wynik [31:0] $end
$var reg 1 - flaga_ERROR $end
$var reg 1 . flaga_NOT_EVEN_ZERO $end
$var reg 1 / flaga_OVERFLOW $end
$var reg 1 0 flaga_ZEROS $end
$var reg 32 1 o_result [31:0] $end
$var reg 4 2 o_status [3:0] $end
$var reg 32 3 wynik [31:0] $end
$scope function IS_ODD_ZEROS $end
$var reg 32 4 result [31:0] $end
$var integer 32 5 count_zeros [31:0] $end
$var integer 32 6 i [31:0] $end
$upscope $end
$scope module konwersja $end
$var wire 32 7 i_arg_A [31:0] $end
$var reg 1 + o_error $end
$var reg 32 8 o_result [31:0] $end
$upscope $end
$scope module porownanie $end
$var wire 32 9 i_arg_A [31:0] $end
$var wire 32 : i_arg_B [31:0] $end
$var reg 1 ; o_result $end
$upscope $end
$scope module przesuniecie $end
$var wire 32 < i_arg_A [31:0] $end
$var wire 32 = i_arg_B [31:0] $end
$var reg 1 * o_error $end
$var reg 32 > o_result [31:0] $end
$upscope $end
$scope module ustawienie $end
$var wire 32 ? i_arg_A [31:0] $end
$var wire 32 @ i_arg_B [31:0] $end
$var reg 1 ) o_error $end
$var reg 32 A o_result [31:0] $end
$var reg 32 B tymczasowy_rejestr [31:0] $end
$upscope $end
$upscope $end
$upscope $end
