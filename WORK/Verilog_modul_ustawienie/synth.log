
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ustawienie.sv
Parsing SystemVerilog input from `ustawienie.sv' to AST representation.
Generating RTLIL representation for module `\ustawienie'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \ustawienie_rtl

2.2. Analyzing design hierarchy..
Top module:  \ustawienie_rtl
Removing unused module `\ustawienie'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ustawienie_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \ustawienie_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$ustawienie.sv:15$1 in module ustawienie_rtl.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ustawienie_rtl.$proc$ustawienie.sv:15$1'.
     1/43: $4\tymczasowy_rejestr[31:0] [31]
     2/43: $4\tymczasowy_rejestr[31:0] [28]
     3/43: $4\tymczasowy_rejestr[31:0] [26]
     4/43: $4\tymczasowy_rejestr[31:0] [24]
     5/43: $4\tymczasowy_rejestr[31:0] [22]
     6/43: $4\tymczasowy_rejestr[31:0] [20]
     7/43: $4\tymczasowy_rejestr[31:0] [18]
     8/43: $4\tymczasowy_rejestr[31:0] [16]
     9/43: $4\tymczasowy_rejestr[31:0] [14]
    10/43: $4\tymczasowy_rejestr[31:0] [12]
    11/43: $4\tymczasowy_rejestr[31:0] [10]
    12/43: $4\tymczasowy_rejestr[31:0] [8]
    13/43: $4\tymczasowy_rejestr[31:0] [6]
    14/43: $4\tymczasowy_rejestr[31:0] [4]
    15/43: $4\tymczasowy_rejestr[31:0] [2]
    16/43: $4\tymczasowy_rejestr[31:0] [0]
    17/43: $4\tymczasowy_rejestr[31:0] [30]
    18/43: $4\tymczasowy_rejestr[31:0] [25]
    19/43: $4\tymczasowy_rejestr[31:0] [21]
    20/43: $4\tymczasowy_rejestr[31:0] [17]
    21/43: $4\tymczasowy_rejestr[31:0] [13]
    22/43: $4\tymczasowy_rejestr[31:0] [9]
    23/43: $4\tymczasowy_rejestr[31:0] [5]
    24/43: $4\tymczasowy_rejestr[31:0] [1]
    25/43: $4\tymczasowy_rejestr[31:0] [27]
    26/43: $4\tymczasowy_rejestr[31:0] [19]
    27/43: $4\tymczasowy_rejestr[31:0] [11]
    28/43: $4\tymczasowy_rejestr[31:0] [3]
    29/43: $4\tymczasowy_rejestr[31:0] [23]
    30/43: $4\tymczasowy_rejestr[31:0] [7]
    31/43: $4\tymczasowy_rejestr[31:0] [15]
    32/43: $4\tymczasowy_rejestr[31:0] [29]
    33/43: $3\o_result[31:0]
    34/43: $3\tymczasowy_rejestr[31:0]
    35/43: $2\o_error[0:0]
    36/43: $2\o_result[31:0]
    37/43: $2\tymczasowy_rejestr[31:0]
    38/43: $1\o_error[0:0]
    39/43: $1\o_result[31:0]
    40/43: $1\tymczasowy_rejestr[31:0]
    41/43: $0\o_error[0:0]
    42/43: $0\o_result[31:0]
    43/43: $0\tymczasowy_rejestr[31:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ustawienie_rtl.\tymczasowy_rejestr' from process `\ustawienie_rtl.$proc$ustawienie.sv:15$1'.
No latch inferred for signal `\ustawienie_rtl.\o_result' from process `\ustawienie_rtl.$proc$ustawienie.sv:15$1'.
No latch inferred for signal `\ustawienie_rtl.\o_error' from process `\ustawienie_rtl.$proc$ustawienie.sv:15$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\ustawienie_rtl.$proc$ustawienie.sv:15$1'.
Removing empty process `ustawienie_rtl.$proc$ustawienie.sv:15$1'.
Cleaned up 4 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.
<suppressed ~2 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 6 unused cells and 164 unused wires.
<suppressed ~8 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module ustawienie_rtl..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$898.
    dead port 1/2 on $mux $procmux$913.
    dead port 1/2 on $mux $procmux$919.
Removed 4 multiplexer ports.
<suppressed ~34 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 26 bits (of 32) from port B of cell ustawienie_rtl.$gt$ustawienie.sv:28$3 ($gt).
Removed top 31 bits (of 32) from port B of cell ustawienie_rtl.$ge$ustawienie.sv:33$4 ($ge).
Removed top 25 bits (of 32) from port B of cell ustawienie_rtl.$lt$ustawienie.sv:33$7 ($lt).
Removed cell ustawienie_rtl.$procmux$15 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$14_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$18 ($mux).
Removed cell ustawienie_rtl.$procmux$21 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$29_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$30 ($mux).
Removed cell ustawienie_rtl.$procmux$33 ($mux).
Removed cell ustawienie_rtl.$procmux$36 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$46_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$47 ($mux).
Removed cell ustawienie_rtl.$procmux$50 ($mux).
Removed cell ustawienie_rtl.$procmux$53 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$65_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$66 ($mux).
Removed cell ustawienie_rtl.$procmux$69 ($mux).
Removed cell ustawienie_rtl.$procmux$72 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$86_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$87 ($mux).
Removed cell ustawienie_rtl.$procmux$90 ($mux).
Removed cell ustawienie_rtl.$procmux$93 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$109_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$110 ($mux).
Removed cell ustawienie_rtl.$procmux$113 ($mux).
Removed cell ustawienie_rtl.$procmux$116 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$134_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$135 ($mux).
Removed cell ustawienie_rtl.$procmux$138 ($mux).
Removed cell ustawienie_rtl.$procmux$141 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$161_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$162 ($mux).
Removed cell ustawienie_rtl.$procmux$165 ($mux).
Removed cell ustawienie_rtl.$procmux$168 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$190_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$191 ($mux).
Removed cell ustawienie_rtl.$procmux$194 ($mux).
Removed cell ustawienie_rtl.$procmux$197 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$221_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$222 ($mux).
Removed cell ustawienie_rtl.$procmux$225 ($mux).
Removed cell ustawienie_rtl.$procmux$228 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$254_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$255 ($mux).
Removed cell ustawienie_rtl.$procmux$258 ($mux).
Removed cell ustawienie_rtl.$procmux$261 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$289_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$290 ($mux).
Removed cell ustawienie_rtl.$procmux$293 ($mux).
Removed cell ustawienie_rtl.$procmux$296 ($mux).
Removed top 29 bits (of 32) from port B of cell ustawienie_rtl.$procmux$326_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$327 ($mux).
Removed cell ustawienie_rtl.$procmux$330 ($mux).
Removed cell ustawienie_rtl.$procmux$333 ($mux).
Removed top 29 bits (of 32) from port B of cell ustawienie_rtl.$procmux$365_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$366 ($mux).
Removed cell ustawienie_rtl.$procmux$369 ($mux).
Removed cell ustawienie_rtl.$procmux$372 ($mux).
Removed top 30 bits (of 32) from port B of cell ustawienie_rtl.$procmux$406_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$407 ($mux).
Removed cell ustawienie_rtl.$procmux$410 ($mux).
Removed cell ustawienie_rtl.$procmux$413 ($mux).
Removed cell ustawienie_rtl.$procmux$450 ($mux).
Removed cell ustawienie_rtl.$procmux$453 ($mux).
Removed cell ustawienie_rtl.$procmux$456 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$462_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$463 ($mux).
Removed cell ustawienie_rtl.$procmux$466 ($mux).
Removed cell ustawienie_rtl.$procmux$469 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$480_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$481 ($mux).
Removed cell ustawienie_rtl.$procmux$484 ($mux).
Removed cell ustawienie_rtl.$procmux$487 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$502_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$503 ($mux).
Removed cell ustawienie_rtl.$procmux$506 ($mux).
Removed cell ustawienie_rtl.$procmux$509 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$528_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$529 ($mux).
Removed cell ustawienie_rtl.$procmux$532 ($mux).
Removed cell ustawienie_rtl.$procmux$535 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$558_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$559 ($mux).
Removed cell ustawienie_rtl.$procmux$562 ($mux).
Removed cell ustawienie_rtl.$procmux$565 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$592_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$593 ($mux).
Removed cell ustawienie_rtl.$procmux$596 ($mux).
Removed cell ustawienie_rtl.$procmux$599 ($mux).
Removed top 29 bits (of 32) from port B of cell ustawienie_rtl.$procmux$630_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$631 ($mux).
Removed cell ustawienie_rtl.$procmux$634 ($mux).
Removed cell ustawienie_rtl.$procmux$637 ($mux).
Removed top 31 bits (of 32) from port B of cell ustawienie_rtl.$procmux$672_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$673 ($mux).
Removed cell ustawienie_rtl.$procmux$676 ($mux).
Removed cell ustawienie_rtl.$procmux$679 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$688_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$689 ($mux).
Removed cell ustawienie_rtl.$procmux$692 ($mux).
Removed cell ustawienie_rtl.$procmux$695 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$712_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$713 ($mux).
Removed cell ustawienie_rtl.$procmux$716 ($mux).
Removed cell ustawienie_rtl.$procmux$719 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$744_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$745 ($mux).
Removed cell ustawienie_rtl.$procmux$748 ($mux).
Removed cell ustawienie_rtl.$procmux$751 ($mux).
Removed top 30 bits (of 32) from port B of cell ustawienie_rtl.$procmux$784_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$785 ($mux).
Removed cell ustawienie_rtl.$procmux$788 ($mux).
Removed cell ustawienie_rtl.$procmux$791 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$804_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$805 ($mux).
Removed cell ustawienie_rtl.$procmux$808 ($mux).
Removed cell ustawienie_rtl.$procmux$811 ($mux).
Removed top 29 bits (of 32) from port B of cell ustawienie_rtl.$procmux$840_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$841 ($mux).
Removed cell ustawienie_rtl.$procmux$844 ($mux).
Removed cell ustawienie_rtl.$procmux$847 ($mux).
Removed top 28 bits (of 32) from port B of cell ustawienie_rtl.$procmux$868_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$869 ($mux).
Removed cell ustawienie_rtl.$procmux$872 ($mux).
Removed cell ustawienie_rtl.$procmux$875 ($mux).
Removed top 27 bits (of 32) from port B of cell ustawienie_rtl.$procmux$882_CMP0 ($eq).
Removed cell ustawienie_rtl.$procmux$883 ($mux).
Removed cell ustawienie_rtl.$procmux$886 ($mux).
Removed cell ustawienie_rtl.$procmux$889 ($mux).
Removed cell ustawienie_rtl.$procmux$892 ($mux).
Removed cell ustawienie_rtl.$procmux$916 ($mux).
Removed cell ustawienie_rtl.$procmux$931 ($mux).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 5 unused cells and 104 unused wires.
<suppressed ~6 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~516 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ustawienie_rtl:
  creating $alu model for $gt$ustawienie.sv:28$3 ($gt): new $alu
  creating $alu cell for $gt$ustawienie.sv:28$3: $auto$alumacc.cc:474:replace_alu$937
  created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.
<suppressed ~34 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 33 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawienie_rtl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawienie_rtl.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=6\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~384 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.
<suppressed ~1078 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
<suppressed ~2760 debug messages>
Removed a total of 920 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 56 unused cells and 202 unused wires.
<suppressed ~57 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\ustawienie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 332 gates and 397 wires to a netlist network with 64 inputs and 33 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:              OAI3 cells:       33
ABC RESULTS:                OR cells:      105
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:        internal signals:      300
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawienie_rtl.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawienie_rtl'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 259 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \ustawienie_rtl

3.25.2. Analyzing design hierarchy..
Top module:  \ustawienie_rtl
Removed 0 unused modules.

3.26. Printing statistics.

=== ustawienie_rtl ===

   Number of wires:                125
   Number of wire bits:            218
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                154
     $_ANDNOT_                       3
     $_AND_                          1
     $_AOI3_                         1
     $_NAND_                         2
     $_NOR_                          2
     $_OAI3_                        33
     $_ORNOT_                        7
     $_OR_                         105

3.27. Executing CHECK pass (checking for obvious problems).
checking module ustawienie_rtl..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\ustawienie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 154 gates and 218 wires to a netlist network with 64 inputs and 33 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       65
ABC RESULTS:               NOT cells:       44
ABC RESULTS:                OR cells:       57
ABC RESULTS:        internal signals:      121
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawienie_rtl..
Removed 0 unused cells and 218 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.
Dumping module `\ustawienie_rtl'.

7. Printing statistics.
