
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: przesuniecie.sv
Parsing SystemVerilog input from `przesuniecie.sv' to AST representation.
Generating RTLIL representation for module `\przesuniecie'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \przesuniecie_rtl

2.2. Analyzing design hierarchy..
Top module:  \przesuniecie_rtl
Removing unused module `\przesuniecie'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \przesuniecie_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \przesuniecie_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$przesuniecie.sv:20$1 in module przesuniecie_rtl.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\przesuniecie_rtl.$proc$przesuniecie.sv:20$1'.
     1/16: $5\o_overflow[0:0]
     2/16: $5\o_error[0:0]
     3/16: $4\o_overflow[0:0]
     4/16: $4\o_error[0:0]
     5/16: $3\o_overflow[0:0]
     6/16: $3\o_error[0:0]
     7/16: $3\o_result[31:0]
     8/16: $2\o_overflow[0:0]
     9/16: $2\o_error[0:0]
    10/16: $2\o_result[31:0]
    11/16: $1\o_overflow[0:0]
    12/16: $1\o_error[0:0]
    13/16: $1\o_result[31:0]
    14/16: $0\o_error[0:0]
    15/16: $0\o_result[31:0]
    16/16: $0\o_overflow[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\przesuniecie_rtl.\o_overflow' from process `\przesuniecie_rtl.$proc$przesuniecie.sv:20$1'.
No latch inferred for signal `\przesuniecie_rtl.\o_result' from process `\przesuniecie_rtl.$proc$przesuniecie.sv:20$1'.
No latch inferred for signal `\przesuniecie_rtl.\o_error' from process `\przesuniecie_rtl.$proc$przesuniecie.sv:20$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\przesuniecie_rtl.$proc$przesuniecie.sv:20$1'.
Removing empty process `przesuniecie_rtl.$proc$przesuniecie.sv:20$1'.
Cleaned up 5 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.
<suppressed ~1 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 0 unused cells and 54 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module przesuniecie_rtl..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \przesuniecie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$103.
    dead port 1/2 on $mux $procmux$109.
    dead port 1/2 on $mux $procmux$115.
    dead port 1/2 on $mux $procmux$23.
    dead port 1/2 on $mux $procmux$26.
    dead port 1/2 on $mux $procmux$29.
    dead port 1/2 on $mux $procmux$32.
    dead port 1/2 on $mux $procmux$37.
    dead port 1/2 on $mux $procmux$40.
    dead port 1/2 on $mux $procmux$43.
    dead port 1/2 on $mux $procmux$46.
    dead port 1/2 on $mux $procmux$52.
    dead port 1/2 on $mux $procmux$55.
    dead port 1/2 on $mux $procmux$58.
    dead port 1/2 on $mux $procmux$64.
    dead port 1/2 on $mux $procmux$67.
    dead port 1/2 on $mux $procmux$70.
    dead port 1/2 on $mux $procmux$76.
    dead port 1/2 on $mux $procmux$79.
    dead port 1/2 on $mux $procmux$85.
    dead port 1/2 on $mux $procmux$88.
    dead port 1/2 on $mux $procmux$94.
    dead port 1/2 on $mux $procmux$97.
Removed 23 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \przesuniecie_rtl.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 0 unused cells and 28 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \przesuniecie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \przesuniecie_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell przesuniecie_rtl.$gt$przesuniecie.sv:29$3 ($gt).
Removed top 25 bits (of 32) from port B of cell przesuniecie_rtl.$lt$przesuniecie.sv:29$5 ($lt).
Removed top 25 bits (of 32) from port B of cell przesuniecie_rtl.$eq$przesuniecie.sv:48$12 ($eq).
Removed top 31 bits (of 32) from port B of cell przesuniecie_rtl.$lt$przesuniecie.sv:49$13 ($lt).
Removed top 31 bits (of 32) from mux cell przesuniecie_rtl.$ternary$przesuniecie.sv:49$14 ($mux).
Removed top 31 bits (of 32) from port B of cell przesuniecie_rtl.$lt$przesuniecie.sv:56$16 ($lt).
Removed top 25 bits (of 32) from port B of cell przesuniecie_rtl.$gt$przesuniecie.sv:63$18 ($gt).
Removed cell przesuniecie_rtl.$procmux$91 ($mux).
Removed top 31 bits (of 32) from wire przesuniecie_rtl.$3\o_result[31:0].
Removed top 31 bits (of 32) from wire przesuniecie_rtl.$ternary$przesuniecie.sv:49$14_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~84 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module przesuniecie_rtl:
  creating $alu model for $gt$przesuniecie.sv:29$3 ($gt): new $alu
  creating $alu model for $gt$przesuniecie.sv:63$18 ($gt): new $alu
  creating $alu model for $lt$przesuniecie.sv:29$5 ($lt): merged with $gt$przesuniecie.sv:63$18.
  creating $alu model for $lt$przesuniecie.sv:49$13 ($lt): new $alu
  creating $alu model for $lt$przesuniecie.sv:56$16 ($lt): merged with $gt$przesuniecie.sv:29$3.
  creating $alu model for $eq$przesuniecie.sv:48$12 ($eq): merged with $gt$przesuniecie.sv:63$18.
  creating $alu cell for $lt$przesuniecie.sv:49$13: $auto$alumacc.cc:474:replace_alu$131
  creating $alu cell for $gt$przesuniecie.sv:63$18, $lt$przesuniecie.sv:29$5, $eq$przesuniecie.sv:48$12: $auto$alumacc.cc:474:replace_alu$144
  creating $alu cell for $gt$przesuniecie.sv:29$3, $lt$przesuniecie.sv:56$16: $auto$alumacc.cc:474:replace_alu$157
  created 3 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.
<suppressed ~3 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \przesuniecie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \przesuniecie_rtl.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$151: { $auto$alumacc.cc:490:replace_alu$145 [0] $auto$alumacc.cc:490:replace_alu$145 [1] $auto$alumacc.cc:490:replace_alu$145 [2] $auto$alumacc.cc:490:replace_alu$145 [3] $auto$alumacc.cc:490:replace_alu$145 [4] $auto$alumacc.cc:490:replace_alu$145 [5] $auto$alumacc.cc:490:replace_alu$145 [6] $auto$alumacc.cc:490:replace_alu$145 [7] $auto$alumacc.cc:490:replace_alu$145 [8] $auto$alumacc.cc:490:replace_alu$145 [9] $auto$alumacc.cc:490:replace_alu$145 [10] $auto$alumacc.cc:490:replace_alu$145 [11] $auto$alumacc.cc:490:replace_alu$145 [12] $auto$alumacc.cc:490:replace_alu$145 [13] $auto$alumacc.cc:490:replace_alu$145 [14] $auto$alumacc.cc:490:replace_alu$145 [15] $auto$alumacc.cc:490:replace_alu$145 [16] $auto$alumacc.cc:490:replace_alu$145 [17] $auto$alumacc.cc:490:replace_alu$145 [18] $auto$alumacc.cc:490:replace_alu$145 [19] $auto$alumacc.cc:490:replace_alu$145 [20] $auto$alumacc.cc:490:replace_alu$145 [21] $auto$alumacc.cc:490:replace_alu$145 [22] $auto$alumacc.cc:490:replace_alu$145 [23] $auto$alumacc.cc:490:replace_alu$145 [24] $auto$alumacc.cc:490:replace_alu$145 [25] $auto$alumacc.cc:490:replace_alu$145 [26] $auto$alumacc.cc:490:replace_alu$145 [27] $auto$alumacc.cc:490:replace_alu$145 [28] $auto$alumacc.cc:490:replace_alu$145 [29] $auto$alumacc.cc:490:replace_alu$145 [30] $auto$alumacc.cc:490:replace_alu$145 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$134: { $auto$alumacc.cc:490:replace_alu$132 [0] $auto$alumacc.cc:490:replace_alu$132 [1] $auto$alumacc.cc:490:replace_alu$132 [2] $auto$alumacc.cc:490:replace_alu$132 [3] $auto$alumacc.cc:490:replace_alu$132 [4] $auto$alumacc.cc:490:replace_alu$132 [5] $auto$alumacc.cc:490:replace_alu$132 [6] $auto$alumacc.cc:490:replace_alu$132 [7] $auto$alumacc.cc:490:replace_alu$132 [8] $auto$alumacc.cc:490:replace_alu$132 [9] $auto$alumacc.cc:490:replace_alu$132 [10] $auto$alumacc.cc:490:replace_alu$132 [11] $auto$alumacc.cc:490:replace_alu$132 [12] $auto$alumacc.cc:490:replace_alu$132 [13] $auto$alumacc.cc:490:replace_alu$132 [14] $auto$alumacc.cc:490:replace_alu$132 [15] $auto$alumacc.cc:490:replace_alu$132 [16] $auto$alumacc.cc:490:replace_alu$132 [17] $auto$alumacc.cc:490:replace_alu$132 [18] $auto$alumacc.cc:490:replace_alu$132 [19] $auto$alumacc.cc:490:replace_alu$132 [20] $auto$alumacc.cc:490:replace_alu$132 [21] $auto$alumacc.cc:490:replace_alu$132 [22] $auto$alumacc.cc:490:replace_alu$132 [23] $auto$alumacc.cc:490:replace_alu$132 [24] $auto$alumacc.cc:490:replace_alu$132 [25] $auto$alumacc.cc:490:replace_alu$132 [26] $auto$alumacc.cc:490:replace_alu$132 [27] $auto$alumacc.cc:490:replace_alu$132 [28] $auto$alumacc.cc:490:replace_alu$132 [29] $auto$alumacc.cc:490:replace_alu$132 [30] $auto$alumacc.cc:490:replace_alu$132 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$164: { $auto$alumacc.cc:490:replace_alu$158 [0] $auto$alumacc.cc:490:replace_alu$158 [1] $auto$alumacc.cc:490:replace_alu$158 [2] $auto$alumacc.cc:490:replace_alu$158 [3] $auto$alumacc.cc:490:replace_alu$158 [4] $auto$alumacc.cc:490:replace_alu$158 [5] $auto$alumacc.cc:490:replace_alu$158 [6] $auto$alumacc.cc:490:replace_alu$158 [7] $auto$alumacc.cc:490:replace_alu$158 [8] $auto$alumacc.cc:490:replace_alu$158 [9] $auto$alumacc.cc:490:replace_alu$158 [10] $auto$alumacc.cc:490:replace_alu$158 [11] $auto$alumacc.cc:490:replace_alu$158 [12] $auto$alumacc.cc:490:replace_alu$158 [13] $auto$alumacc.cc:490:replace_alu$158 [14] $auto$alumacc.cc:490:replace_alu$158 [15] $auto$alumacc.cc:490:replace_alu$158 [16] $auto$alumacc.cc:490:replace_alu$158 [17] $auto$alumacc.cc:490:replace_alu$158 [18] $auto$alumacc.cc:490:replace_alu$158 [19] $auto$alumacc.cc:490:replace_alu$158 [20] $auto$alumacc.cc:490:replace_alu$158 [21] $auto$alumacc.cc:490:replace_alu$158 [22] $auto$alumacc.cc:490:replace_alu$158 [23] $auto$alumacc.cc:490:replace_alu$158 [24] $auto$alumacc.cc:490:replace_alu$158 [25] $auto$alumacc.cc:490:replace_alu$158 [26] $auto$alumacc.cc:490:replace_alu$158 [27] $auto$alumacc.cc:490:replace_alu$158 [28] $auto$alumacc.cc:490:replace_alu$158 [29] $auto$alumacc.cc:490:replace_alu$158 [30] $auto$alumacc.cc:490:replace_alu$158 [31] }
  Optimizing cells in module \przesuniecie_rtl.
Performed a total of 3 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 2 unused cells and 8 unused wires.
<suppressed ~3 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \przesuniecie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \przesuniecie_rtl.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.
<suppressed ~4 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \przesuniecie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \przesuniecie_rtl.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$b11252479d62a4b4e0b25de06cb2d80b446b12e4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=7\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1200 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.
<suppressed ~832 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
<suppressed ~507 debug messages>
Removed a total of 169 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 154 unused cells and 418 unused wires.
<suppressed ~155 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\przesuniecie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 502 gates and 568 wires to a netlist network with 64 inputs and 34 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       75
ABC RESULTS:               MUX cells:      162
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        6
ABC RESULTS:                OR cells:       84
ABC RESULTS:             ORNOT cells:       38
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:      470
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       34
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module przesuniecie_rtl.
<suppressed ~129 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\przesuniecie_rtl'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 0 unused cells and 158 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \przesuniecie_rtl

3.25.2. Analyzing design hierarchy..
Top module:  \przesuniecie_rtl
Removed 0 unused modules.

3.26. Printing statistics.

=== przesuniecie_rtl ===

   Number of wires:                361
   Number of wire bits:            454
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                390
     $_ANDNOT_                      75
     $_AND_                          1
     $_MUX_                        162
     $_NAND_                        17
     $_NOR_                          5
     $_NOT_                          6
     $_ORNOT_                       38
     $_OR_                          84
     $_XNOR_                         1
     $_XOR_                          1

3.27. Executing CHECK pass (checking for obvious problems).
checking module przesuniecie_rtl..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\przesuniecie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 390 gates and 454 wires to a netlist network with 64 inputs and 34 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      262
ABC RESULTS:               NOT cells:       12
ABC RESULTS:                OR cells:      232
ABC RESULTS:        internal signals:      356
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       34
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \przesuniecie_rtl..
Removed 0 unused cells and 454 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.
Dumping module `\przesuniecie_rtl'.

7. Printing statistics.
